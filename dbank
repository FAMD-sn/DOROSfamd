<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MUZbank by DOROSfamd</title>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-database.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <style>
        :root {
            --primary: #6a11cb;
            --secondary: #2575fc;
            --accent: #7b2cbf;
            --light: #f8f9fa;
            --dark: #212529;
            --success: #28a745;
            --danger: #dc3545;
            --warning: #fd7e14;
            --info: #17a2b8;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            color: var(--dark);
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .card {
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            padding: 25px;
            margin-bottom: 20px;
            transition: transform 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
        }
        
        .btn {
            display: inline-block;
            padding: 12px 24px;
            border-radius: 50px;
            font-weight: 600;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
            background: linear-gradient(to right, var(--primary), var(--secondary));
            color: white;
            box-shadow: 0 4px 15px rgba(106, 17, 203, 0.3);
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(106, 17, 203, 0.4);
        }
        
        .btn-outline {
            background: transparent;
            border: 2px solid var(--primary);
            color: var(--primary);
        }
        
        .btn-outline:hover {
            background: var(--primary);
            color: white;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            transition: border 0.3s ease;
        }
        
        .form-control:focus {
            border-color: var(--primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(106, 17, 203, 0.2);
        }
        
        .bank-card {
            position: relative;
            height: 200px;
            border-radius: 15px;
            padding: 20px;
            color: white;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            margin-bottom: 30px;
        }
        
        .bank-card::before {
            content: '';
            position: absolute;
            top: -50%;
            right: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0) 70%);
            transform: rotate(30deg);
        }
        
        .bank-card-logo {
            font-weight: bold;
            font-size: 18px;
            margin-bottom: 30px;
        }
        
        .bank-card-number {
            font-size: 22px;
            letter-spacing: 3px;
            margin-bottom: 20px;
            font-family: 'Courier New', monospace;
        }
        
        .bank-card-details {
            display: flex;
            justify-content: space-between;
            margin-top: 30px;
        }
        
        .bank-card-name {
            font-size: 16px;
            text-transform: uppercase;
        }
        
        .bank-card-expiry {
            font-size: 16px;
        }
        
        .balance {
            font-size: 36px;
            font-weight: bold;
            margin: 20px 0;
            color: var(--primary);
            transition: all 0.5s ease;
        }
        
        .transaction {
            display: flex;
            justify-content: space-between;
            padding: 15px 0;
            border-bottom: 1px solid #eee;
        }
        
        .transaction-amount {
            font-weight: bold;
        }
        
        .positive {
            color: var(--success);
        }
        
        .negative {
            color: var(--danger);
        }
        
        .neutral {
            color: var(--info);
        }
        
        .hidden {
            display: none !important;
        }
        
        .language-switcher {
            position: absolute;
            top: 20px;
            right: 20px;
            z-index: 100;
        }
        
        .language-btn {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
            margin-left: 5px;
        }
        
        .language-btn.active {
            background: rgba(255, 255, 255, 0.5);
        }
        
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        
        .modal-content {
            background: white;
            padding: 30px;
            border-radius: 15px;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }
        
        .close-modal {
            position: absolute;
            top: 15px;
            right: 15px;
            font-size: 24px;
            cursor: pointer;
            color: #999;
        }
        
        .qrcode-container {
            display: flex;
            justify-content: center;
            margin: 20px 0;
        }
        
        @media (max-width: 768px) {
            .bank-card-number {
                font-size: 18px;
            }
            
            .balance {
                font-size: 28px;
            }
            
            .btn {
                padding: 10px 20px;
            }
        }
        
        /* Анимация баланса */
        @keyframes balanceIncrease {
            from { transform: scale(1); color: var(--success); }
            50% { transform: scale(1.1); }
            to { transform: scale(1); color: var(--primary); }
        }
        
        @keyframes balanceDecrease {
            from { transform: scale(1); color: var(--danger); }
            50% { transform: scale(0.9); }
            to { transform: scale(1); color: var(--primary); }
        }
        
        .balance-increase {
            animation: balanceIncrease 0.5s ease;
        }
        
        .balance-decrease {
            animation: balanceDecrease 0.5s ease;
        }
        
        /* Лоадер */
        .loader {
            border: 5px solid #f3f3f3;
            border-top: 5px solid var(--primary);
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Языковой переключатель -->
        <div class="language-switcher">
            <button class="language-btn active" data-lang="ru">RU</button>
            <button class="language-btn" data-lang="en">EN</button>
        </div>
        
        <!-- Экран авторизации -->
        <div id="auth-screen" class="card">
            <h1 data-i18n="welcome">Добро пожаловать в MUZbank</h1>
            <p data-i18n="auth_subtitle">Войдите или зарегистрируйтесь, чтобы начать</p>
            
            <div class="form-group">
                <input type="email" id="email" class="form-control" placeholder="Email" data-i18n-placeholder="email_placeholder">
            </div>
            <div class="form-group">
                <input type="password" id="password" class="form-control" placeholder="Пароль" data-i18n-placeholder="password_placeholder">
            </div>
            
            <button id="login-btn" class="btn" data-i18n="login">Войти</button>
            <button id="register-btn" class="btn btn-outline" data-i18n="register">Зарегистрироваться</button>
            
            <div id="auth-message" style="margin-top: 20px; color: var(--danger);"></div>
        </div>
        
        <!-- Экран создания карты -->
        <div id="create-card-screen" class="card hidden">
            <h1 data-i18n="create_card_title">Создание банковской карты</h1>
            <p data-i18n="create_card_subtitle">Придумайте PIN-код для вашей карты (4 цифры)</p>
            
            <div class="form-group">
                <input type="password" id="pin" class="form-control" placeholder="PIN-код" maxlength="4" inputmode="numeric" pattern="\d{4}" data-i18n-placeholder="pin_placeholder">
            </div>
            <div class="form-group">
                <input type="password" id="pin-confirm" class="form-control" placeholder="Подтвердите PIN-код" maxlength="4" inputmode="numeric" pattern="\d{4}" data-i18n-placeholder="pin_confirm_placeholder">
            </div>
            
            <button id="create-card-btn" class="btn" data-i18n="create_card">Создать карту</button>
            
            <div id="create-card-message" style="margin-top: 20px; color: var(--danger);"></div>
        </div>
        
        <!-- Основной экран банка -->
        <div id="bank-screen" class="hidden">
            <!-- Карта банка -->
            <div class="bank-card">
                <div class="bank-card-logo">MUZbank</div>
                <div class="bank-card-number" id="card-number">•••• •••• •••• ••••</div>
                <div class="bank-card-details">
                    <div class="bank-card-name" id="card-name">USER NAME</div>
                    <div class="bank-card-expiry">∞/∞</div>
                </div>
            </div>
            
            <!-- Баланс -->
            <div class="text-center">
                <h2 data-i18n="balance">Баланс</h2>
                <div class="balance" id="balance">0 ₽</div>
            </div>
            
            <!-- Основные действия -->
            <div class="card">
                <h2 data-i18n="actions">Действия</h2>
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                    <button id="deposit-btn" class="btn" data-i18n="deposit">Пополнить</button>
                    <button id="transfer-btn" class="btn" data-i18n="transfer">Перевести</button>
                    <button id="qr-btn" class="btn" data-i18n="show_qr">Показать QR</button>
                    <button id="logout-btn" class="btn btn-outline" data-i18n="logout">Выйти</button>
                </div>
            </div>
            
            <!-- История транзакций -->
            <div class="card">
                <h2 data-i18n="transaction_history">История транзакций</h2>
                <div id="transactions">
                    <p data-i18n="no_transactions">Нет транзакций</p>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Модальное окно пополнения -->
    <div id="deposit-modal" class="modal hidden">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h2 data-i18n="deposit_title">Пополнение баланса</h2>
            <div class="form-group">
                <input type="number" id="deposit-amount" class="form-control" placeholder="Сумма" min="1" data-i18n-placeholder="amount_placeholder">
            </div>
            <button id="confirm-deposit" class="btn" data-i18n="deposit">Пополнить</button>
        </div>
    </div>
    
    <!-- Модальное окно перевода -->
    <div id="transfer-modal" class="modal hidden">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h2 data-i18n="transfer_title">Перевод средств</h2>
            <div class="form-group">
                <input type="text" id="recipient-card" class="form-control" placeholder="Номер карты получателя" data-i18n-placeholder="recipient_card_placeholder">
            </div>
            <div class="form-group">
                <input type="number" id="transfer-amount" class="form-control" placeholder="Сумма" min="1" data-i18n-placeholder="amount_placeholder">
            </div>
            <div class="form-group">
                <input type="password" id="transfer-pin" class="form-control" placeholder="Ваш PIN-код" maxlength="4" data-i18n-placeholder="your_pin_placeholder">
            </div>
            <p data-i18n="transfer_fee">Комиссия за перевод: 1%</p>
            <button id="confirm-transfer" class="btn" data-i18n="transfer">Перевести</button>
        </div>
    </div>
    
    <!-- Модальное окно QR-кода -->
    <div id="qr-modal" class="modal hidden">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h2 data-i18n="qr_title">Ваш QR-код</h2>
            <p data-i18n="qr_subtitle">Отсканируйте этот код для быстрого перевода</p>
            <div class="qrcode-container" id="qrcode"></div>
            <p id="qr-card-number" style="text-align: center; font-family: monospace;"></p>
        </div>
    </div>
    
    <script>
        // Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyB7DP0EZfTQE78CUj8N-_aPyfEf5MvAc5g",
            authDomain: "doroscoin.firebaseapp.com",
            databaseURL: "https://doroscoin-default-rtdb.firebaseio.com",
            projectId: "doroscoin",
            storageBucket: "doroscoin.firebasestorage.app",
            messagingSenderId: "372256789289",
            appId: "1:372256789289:web:48d518bd16c0c5fa6e5d38",
            measurementId: "G-H5VJFTVF08"
        };
        
        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        const database = firebase.database();
        
        // Элементы интерфейса
        const authScreen = document.getElementById('auth-screen');
        const createCardScreen = document.getElementById('create-card-screen');
        const bankScreen = document.getElementById('bank-screen');
        const depositModal = document.getElementById('deposit-modal');
        const transferModal = document.getElementById('transfer-modal');
        const qrModal = document.getElementById('qr-modal');
        const closeButtons = document.querySelectorAll('.close-modal');
        
        // Кнопки
        const loginBtn = document.getElementById('login-btn');
        const registerBtn = document.getElementById('register-btn');
        const createCardBtn = document.getElementById('create-card-btn');
        const depositBtn = document.getElementById('deposit-btn');
        const transferBtn = document.getElementById('transfer-btn');
        const qrBtn = document.getElementById('qr-btn');
        const logoutBtn = document.getElementById('logout-btn');
        const confirmDeposit = document.getElementById('confirm-deposit');
        const confirmTransfer = document.getElementById('confirm-transfer');
        
        // Поля ввода
        const emailInput = document.getElementById('email');
        const passwordInput = document.getElementById('password');
        const pinInput = document.getElementById('pin');
        const pinConfirmInput = document.getElementById('pin-confirm');
        const depositAmountInput = document.getElementById('deposit-amount');
        const transferAmountInput = document.getElementById('transfer-amount');
        const recipientCardInput = document.getElementById('recipient-card');
        const transferPinInput = document.getElementById('transfer-pin');
        
        // Информационные поля
        const cardNumberElement = document.getElementById('card-number');
        const balanceElement = document.getElementById('balance');
        const transactionsElement = document.getElementById('transactions');
        const authMessage = document.getElementById('auth-message');
        const createCardMessage = document.getElementById('create-card-message');
        const qrCardNumberElement = document.getElementById('qr-card-number');
        
        // Локализация
        const translations = {
            ru: {
                welcome: "Добро пожаловать в MUZbank",
                auth_subtitle: "Войдите или зарегистрируйтесь, чтобы начать",
                email_placeholder: "Email",
                password_placeholder: "Пароль",
                login: "Войти",
                register: "Зарегистрироваться",
                create_card_title: "Создание банковской карты",
                create_card_subtitle: "Придумайте PIN-код для вашей карты (4 цифры)",
                pin_placeholder: "PIN-код",
                pin_confirm_placeholder: "Подтвердите PIN-код",
                create_card: "Создать карту",
                balance: "Баланс",
                actions: "Действия",
                deposit: "Пополнить",
                transfer: "Перевести",
                show_qr: "Показать QR",
                logout: "Выйти",
                transaction_history: "История транзакций",
                no_transactions: "Нет транзакций",
                deposit_title: "Пополнение баланса",
                amount_placeholder: "Сумма",
                transfer_title: "Перевод средств",
                recipient_card_placeholder: "Номер карты получателя",
                your_pin_placeholder: "Ваш PIN-код",
                transfer_fee: "Комиссия за перевод: 1%",
                qr_title: "Ваш QR-код",
                qr_subtitle: "Отсканируйте этот код для быстрого перевода",
                invalid_pin: "PIN должен состоять из 4 цифр",
                pins_not_match: "PIN-коды не совпадают",
                deposit_success: "Баланс успешно пополнен",
                transfer_success: "Перевод выполнен успешно",
                transfer_error: "Ошибка перевода: ",
                invalid_card: "Неверный номер карты",
                invalid_pin_transfer: "Неверный PIN-код",
                insufficient_funds: "Недостаточно средств",
                loading: "Загрузка...",
                received_from: "Получено от",
                sent_to: "Отправлено",
                fee: "Комиссия",
                admin_fee: "Комиссия администратору"
            },
            en: {
                welcome: "Welcome to MUZbank",
                auth_subtitle: "Login or register to get started",
                email_placeholder: "Email",
                password_placeholder: "Password",
                login: "Login",
                register: "Register",
                create_card_title: "Create bank card",
                create_card_subtitle: "Create a PIN code for your card (4 digits)",
                pin_placeholder: "PIN code",
                pin_confirm_placeholder: "Confirm PIN code",
                create_card: "Create card",
                balance: "Balance",
                actions: "Actions",
                deposit: "Deposit",
                transfer: "Transfer",
                show_qr: "Show QR",
                logout: "Logout",
                transaction_history: "Transaction history",
                no_transactions: "No transactions",
                deposit_title: "Deposit funds",
                amount_placeholder: "Amount",
                transfer_title: "Transfer funds",
                recipient_card_placeholder: "Recipient card number",
                your_pin_placeholder: "Your PIN code",
                transfer_fee: "Transfer fee: 1%",
                qr_title: "Your QR code",
                qr_subtitle: "Scan this code for quick transfer",
                invalid_pin: "PIN must be 4 digits",
                pins_not_match: "PIN codes don't match",
                deposit_success: "Balance topped up successfully",
                transfer_success: "Transfer completed successfully",
                transfer_error: "Transfer error: ",
                invalid_card: "Invalid card number",
                invalid_pin_transfer: "Invalid PIN code",
                insufficient_funds: "Insufficient funds",
                loading: "Loading...",
                received_from: "Received from",
                sent_to: "Sent to",
                fee: "Fee",
                admin_fee: "Admin fee"
            }
        };
        
        let currentLanguage = 'ru';
        
        // Функция для перевода интерфейса
        function translatePage(lang) {
            currentLanguage = lang;
            document.querySelectorAll('[data-i18n]').forEach(element => {
                const key = element.getAttribute('data-i18n');
                if (translations[lang][key]) {
                    element.textContent = translations[lang][key];
                }
            });
            
            document.querySelectorAll('[data-i18n-placeholder]').forEach(element => {
                const key = element.getAttribute('data-i18n-placeholder');
                if (translations[lang][key]) {
                    element.placeholder = translations[lang][key];
                }
            });
        }
        
        // Генератор случайного номера карты
        function generateCardNumber() {
            let cardNumber = '';
            for (let i = 0; i < 16; i++) {
                cardNumber += Math.floor(Math.random() * 10);
                if ((i + 1) % 4 === 0 && i !== 15) {
                    cardNumber += ' ';
                }
            }
            return cardNumber;
        }
        
        // Форматирование суммы
        function formatAmount(amount) {
            return amount.toLocaleString(currentLanguage, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + ' ₽';
        }
        
        // Анимация изменения баланса
        function animateBalanceChange(type) {
            balanceElement.classList.remove('balance-increase', 'balance-decrease');
            void balanceElement.offsetWidth; // Trigger reflow
            balanceElement.classList.add(type === 'increase' ? 'balance-increase' : 'balance-decrease');
        }
        
        // Отображение транзакции
        function displayTransaction(transaction) {
            const transactionElement = document.createElement('div');
            transactionElement.className = 'transaction';
            
            const dateElement = document.createElement('div');
            dateElement.textContent = new Date(transaction.date).toLocaleString(currentLanguage);
            
            const descriptionElement = document.createElement('div');
            let description = '';
            
            if (transaction.type === 'deposit') {
                description = translations[currentLanguage].deposit;
            } else if (transaction.type === 'transfer') {
                if (transaction.direction === 'in') {
                    description = `${translations[currentLanguage].received_from} ${transaction.fromCard}`;
                } else {
                    description = `${translations[currentLanguage].sent_to} ${transaction.toCard}`;
                }
            } else if (transaction.type === 'fee') {
                description = translations[currentLanguage].fee;
            } else if (transaction.type === 'admin_fee') {
                description = translations[currentLanguage].admin_fee;
            }
            
            descriptionElement.textContent = description;
            
            const amountElement = document.createElement('div');
            amountElement.className = 'transaction-amount';
            
            if (transaction.type === 'deposit' || (transaction.type === 'transfer' && transaction.direction === 'in')) {
                amountElement.classList.add('positive');
                amountElement.textContent = `+${formatAmount(transaction.amount)}`;
            } else {
                amountElement.classList.add('negative');
                amountElement.textContent = `-${formatAmount(transaction.amount)}`;
            }
            
            if (transaction.type === 'fee' || transaction.type === 'admin_fee') {
                amountElement.classList.remove('positive', 'negative');
                amountElement.classList.add('neutral');
            }
            
            transactionElement.appendChild(dateElement);
            transactionElement.appendChild(descriptionElement);
            transactionElement.appendChild(amountElement);
            
            transactionsElement.insertBefore(transactionElement, transactionsElement.firstChild);
        }
        
        // Загрузка транзакций
        function loadTransactions(userId) {
            transactionsElement.innerHTML = `<p>${translations[currentLanguage].loading}</p>`;
            
            database.ref(`users/${userId}/transactions`).once('value').then(snapshot => {
                const transactions = snapshot.val();
                
                if (!transactions || Object.keys(transactions).length === 0) {
                    transactionsElement.innerHTML = `<p>${translations[currentLanguage].no_transactions}</p>`;
                    return;
                }
                
                transactionsElement.innerHTML = '';
                
                // Сортируем транзакции по дате (новые сначала)
                const sortedTransactions = Object.values(transactions).sort((a, b) => b.date - a.date);
                
                sortedTransactions.forEach(transaction => {
                    displayTransaction(transaction);
                });
            });
        }
        
        // Проверка, есть ли у пользователя карта
        function checkUserCard(user) {
            database.ref(`users/${user.uid}`).once('value').then(snapshot => {
                const userData = snapshot.val();
                
                if (!userData || !userData.cardNumber) {
                    // У пользователя нет карты, показываем экран создания карты
                    authScreen.classList.add('hidden');
                    createCardScreen.classList.remove('hidden');
                    bankScreen.classList.add('hidden');
                } else {
                    // У пользователя есть карта, показываем основной экран
                    authScreen.classList.add('hidden');
                    createCardScreen.classList.add('hidden');
                    bankScreen.classList.remove('hidden');
                    
                    // Обновляем информацию о карте
                    cardNumberElement.textContent = userData.cardNumber;
                    
                    // Обновляем баланс
                    if (userData.balance) {
                        balanceElement.textContent = formatAmount(userData.balance);
                    } else {
                        balanceElement.textContent = formatAmount(0);
                    }
                    
                    // Загружаем транзакции
                    loadTransactions(user.uid);
                }
            });
        }
        
        // Инициализация приложения
        function initApp() {
            // Проверяем авторизацию при загрузке
            auth.onAuthStateChanged(user => {
                if (user) {
                    // Пользователь авторизован
                    checkUserCard(user);
                } else {
                    // Пользователь не авторизован
                    authScreen.classList.remove('hidden');
                    createCardScreen.classList.add('hidden');
                    bankScreen.classList.add('hidden');
                }
            });
            
            // Обработчики кнопок авторизации
            loginBtn.addEventListener('click', () => {
                const email = emailInput.value;
                const password = passwordInput.value;
                
                auth.signInWithEmailAndPassword(email, password)
                    .then(() => {
                        authMessage.textContent = '';
                    })
                    .catch(error => {
                        authMessage.textContent = error.message;
                    });
            });
            
            registerBtn.addEventListener('click', () => {
                const email = emailInput.value;
                const password = passwordInput.value;
                
                auth.createUserWithEmailAndPassword(email, password)
                    .then(() => {
                        authMessage.textContent = '';
                    })
                    .catch(error => {
                        authMessage.textContent = error.message;
                    });
            });
            
            // Обработчик создания карты
            createCardBtn.addEventListener('click', () => {
                const pin = pinInput.value;
                const pinConfirm = pinConfirmInput.value;
                
                // Валидация PIN-кода
                if (!/^\d{4}$/.test(pin)) {
                    createCardMessage.textContent = translations[currentLanguage].invalid_pin;
                    return;
                }
                
                if (pin !== pinConfirm) {
                    createCardMessage.textContent = translations[currentLanguage].pins_not_match;
                    return;
                }
                
                createCardMessage.textContent = '';
                
                // Создаем карту
                const user = auth.currentUser;
                const cardNumber = generateCardNumber();
                
                database.ref(`users/${user.uid}`).set({
                    email: user.email,
                    cardNumber: cardNumber,
                    pin: pin, // В реальном приложении PIN нужно хэшировать!
                    balance: 0,
                    createdAt: firebase.database.ServerValue.TIMESTAMP
                }).then(() => {
                    checkUserCard(user);
                });
            });
            
            // Обработчики кнопок основного экрана
            depositBtn.addEventListener('click', () => {
                depositAmountInput.value = '';
                depositModal.classList.remove('hidden');
            });
            
            transferBtn.addEventListener('click', () => {
                recipientCardInput.value = '';
                transferAmountInput.value = '';
                transferPinInput.value = '';
                transferModal.classList.remove('hidden');
            });
            
            qrBtn.addEventListener('click', () => {
                const user = auth.currentUser;
                
                database.ref(`users/${user.uid}`).once('value').then(snapshot => {
                    const userData = snapshot.val();
                    
                    if (userData && userData.cardNumber) {
                        // Очищаем предыдущий QR-код
                        document.getElementById('qrcode').innerHTML = '';
                        
                        // Создаем новый QR-код
                        new QRCode(document.getElementById('qrcode'), {
                            text: userData.cardNumber,
                            width: 200,
                            height: 200,
                            colorDark: "#000000",
                            colorLight: "#ffffff",
                            correctLevel: QRCode.CorrectLevel.H
                        });
                        
                        qrCardNumberElement.textContent = userData.cardNumber;
                        qrModal.classList.remove('hidden');
                    }
                });
            });
            
            logoutBtn.addEventListener('click', () => {
                auth.signOut();
            });
            
            // Обработчики подтверждения действий
            confirmDeposit.addEventListener('click', () => {
                const amount = parseFloat(depositAmountInput.value);
                
                if (isNaN(amount) || amount <= 0) {
                    alert(translations[currentLanguage].amount_placeholder);
                    return;
                }
                
                const user = auth.currentUser;
                
                database.ref(`users/${user.uid}`).transaction(userData => {
                    if (userData) {
                        userData.balance = (userData.balance || 0) + amount;
                        
                        // Добавляем транзакцию
                        const transactionId = database.ref().child('transactions').push().key;
                        const transaction = {
                            type: 'deposit',
                            amount: amount,
                            date: Date.now()
                        };
                        
                        userData.transactions = userData.transactions || {};
                        userData.transactions[transactionId] = transaction;
                    }
                    return userData;
                }).then(() => {
                    animateBalanceChange('increase');
                    depositModal.classList.add('hidden');
                    loadTransactions(user.uid);
                });
            });
            
            confirmTransfer.addEventListener('click', async () => {
                const recipientCard = recipientCardInput.value.replace(/\s/g, '');
                const amount = parseFloat(transferAmountInput.value);
                const pin = transferPinInput.value;
                
                // Валидация
                if (!/^\d{16}$/.test(recipientCard)) {
                    alert(translations[currentLanguage].invalid_card);
                    return;
                }
                
                if (isNaN(amount) || amount <= 0) {
                    alert(translations[currentLanguage].amount_placeholder);
                    return;
                }
                
                if (!/^\d{4}$/.test(pin)) {
                    alert(translations[currentLanguage].invalid_pin_transfer);
                    return;
                }
                
                const sender = auth.currentUser;
                
                // Проверяем PIN отправителя
                const senderData = (await database.ref(`users/${sender.uid}`).once('value')).val();
                
                if (senderData.pin !== pin) {
                    alert(translations[currentLanguage].invalid_pin_transfer);
                    return;
                }
                
                // Проверяем баланс отправителя (с учетом комиссии)
                const fee = amount * 0.01;
                const totalAmount = amount + fee;
                
                if (senderData.balance < totalAmount) {
                    alert(translations[currentLanguage].insufficient_funds);
                    return;
                }
                
                // Ищем получателя по номеру карты
                const usersSnapshot = await database.ref('users').once('value');
                let recipientId = null;
                let recipientData = null;
                
                usersSnapshot.forEach(childSnapshot => {
                    const userData = childSnapshot.val();
                    if (userData.cardNumber && userData.cardNumber.replace(/\s/g, '') === recipientCard) {
                        recipientId = childSnapshot.key;
                        recipientData = userData;
                    }
                });
                
                if (!recipientId) {
                    alert(translations[currentLanguage].invalid_card);
                    return;
                }
                
                // Проверяем, что отправитель не пытается отправить деньги сам себе
                if (recipientId === sender.uid) {
                    alert("Нельзя отправить деньги самому себе");
                    return;
                }
                
                // Выполняем транзакции
                try {
                    // Обновляем баланс отправителя
                    await database.ref(`users/${sender.uid}`).transaction(userData => {
                        if (userData) {
                            userData.balance -= totalAmount;
                            
                            // Добавляем транзакцию отправления
                            const transactionId = database.ref().child('transactions').push().key;
                            const transaction = {
                                type: 'transfer',
                                direction: 'out',
                                toCard: recipientData.cardNumber,
                                amount: amount,
                                fee: fee,
                                date: Date.now()
                            };
                            
                            userData.transactions = userData.transactions || {};
                            userData.transactions[transactionId] = transaction;
                            
                            // Добавляем транзакцию комиссии
                            const feeTransactionId = database.ref().child('transactions').push().key;
                            const feeTransaction = {
                                type: 'fee',
                                amount: fee,
                                date: Date.now()
                            };
                            
                            userData.transactions[feeTransactionId] = feeTransaction;
                        }
                        return userData;
                    });
                    
                    // Обновляем баланс получателя
                    await database.ref(`users/${recipientId}`).transaction(userData => {
                        if (userData) {
                            userData.balance = (userData.balance || 0) + amount;
                            
                            // Добавляем транзакцию получения
                            const transactionId = database.ref().child('transactions').push().key;
                            const transaction = {
                                type: 'transfer',
                                direction: 'in',
                                fromCard: senderData.cardNumber,
                                amount: amount,
                                date: Date.now()
                            };
                            
                            userData.transactions = userData.transactions || {};
                            userData.transactions[transactionId] = transaction;
                        }
                        return userData;
                    });
                    
                    // Добавляем комиссию администратору (ищем аккаунт администратора)
                    const adminSnapshot = await database.ref('users').orderByChild('email').equalTo('dorosfamd@dorosfamd.com').once('value');
                    
                    if (adminSnapshot.exists()) {
                        const adminData = adminSnapshot.val();
                        const adminId = Object.keys(adminData)[0];
                        
                        await database.ref(`users/${adminId}`).transaction(userData => {
                            if (userData) {
                                userData.balance = (userData.balance || 0) + fee;
                                
                                // Добавляем транзакцию комиссии
                                const transactionId = database.ref().child('transactions').push().key;
                                const transaction = {
                                    type: 'admin_fee',
                                    fromCard: senderData.cardNumber,
                                    amount: fee,
                                    date: Date.now()
                                };
                                
                                userData.transactions = userData.transactions || {};
                                userData.transactions[transactionId] = transaction;
                            }
                            return userData;
                        });
                    }
                    
                    // Обновляем интерфейс
                    animateBalanceChange('decrease');
                    transferModal.classList.add('hidden');
                    loadTransactions(sender.uid);
                    
                    alert(translations[currentLanguage].transfer_success);
                } catch (error) {
                    alert(translations[currentLanguage].transfer_error + error.message);
                }
            });
            
            // Закрытие модальных окон
            closeButtons.forEach(button => {
                button.addEventListener('click', () => {
                    depositModal.classList.add('hidden');
                    transferModal.classList.add('hidden');
                    qrModal.classList.add('hidden');
                });
            });
            
            // Обработчики языкового переключателя
            document.querySelectorAll('.language-btn').forEach(button => {
                button.addEventListener('click', () => {
                    const lang = button.getAttribute('data-lang');
                    translatePage(lang);
                    
                    // Обновляем активную кнопку
                    document.querySelectorAll('.language-btn').forEach(btn => {
                        btn.classList.remove('active');
                    });
                    button.classList.add('active');
                    
                    // Если пользователь авторизован, перезагружаем транзакции
                    const user = auth.currentUser;
                    if (user) {
                        loadTransactions(user.uid);
                        
                        // Обновляем баланс с новым форматированием
                        database.ref(`users/${user.uid}/balance`).once('value').then(snapshot => {
                            const balance = snapshot.val() || 0;
                            balanceElement.textContent = formatAmount(balance);
                        });
                    }
                });
            });
            
            // Инициализация перевода на русский
            translatePage('ru');
        }
        
        // Запуск приложения после загрузки страницы
        window.addEventListener('load', initApp);
    </script>
</body>
</html>